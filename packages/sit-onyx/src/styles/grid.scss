@use "breakpoints.scss" as *;

// prettier-ignore
$gridVariants: (
//  NAME    COLUMNS  GUTTER  MARGIN
    "2xs"   4        1rem    1rem,
    "xs"    8        1rem    1rem,
    "sm"    8        1.5rem  2rem,
    "md"    12       1.5rem  4rem,
    "lg"    16       2rem    4rem,
    "xl"    16       2rem    4rem,
);

// offset 1 is used so the styles only apply to "greater than breakpoint"
// so it does not jump around when the browser windows is resized by a few pixels
$screenOffset: 1;

@layer onyx.utility {
  /**
  * Grid container base class
  */
  .onyx-grid {
    display: grid;
    grid-template-columns: repeat(var(--onyx-grid-columns), minmax(0, 1fr));
    gap: var(--onyx-grid-gutter);
  }

  /**
  * Page class to apply padding, max-width and optional centered.
  * Is usually placed at the root element of every page.
  */
  .onyx-grid-container {
    // Note: The --onyx-grid-margin is implemented as padding here so that is also included in e.g. custom background colors
    // but the term "margin" comes from UX/Figma so we decided to keep naming it margin to be aligned
    padding: var(--onyx-grid-margin);
    max-width: var(--onyx-grid-max-width, none);
    margin-inline: var(--onyx-grid-margin-inline);
    box-sizing: border-box; // max-width should include the padding
  }

  /**
  * Utility class to allow optional centering for pages with max width.
  * Requires a "onyx-grid-max-*" class to be set.
  */
  .onyx-grid-center {
    --onyx-grid-margin-inline: auto;
  }

  /**
  * Grid container class for "xl" breakpoint variant with 20 columns
  */
  @include screen(min, xl, $screenOffset) {
    .onyx-grid-xl-20 {
      --onyx-grid-columns: 20;
    }
  }

  /**
  * Grid element class for defining how many columns the element spans
  */
  @for $i from 1 through 20 {
    .onyx-grid-span-#{$i} {
      grid-column-end: span min($i, var(--onyx-grid-columns));
    }

    @each $breakpoint, $value in $breakpoints {
      @include screen(min, $breakpoint, $screenOffset) {
        .onyx-grid-#{$breakpoint}-span-#{$i} {
          grid-column-end: span min($i, var(--onyx-grid-columns));
        }
      }
    }
  }

  .onyx-grid-max-md {
    --onyx-grid-max-width: #{map-get($breakpoints, lg)};
  }

  .onyx-grid-max-lg {
    --onyx-grid-max-width: #{map-get($breakpoints, xl)};
  }

  /**
  * Defines the grid and page content styles for a given breakpoint.
  */
  @mixin define-breakpoint-styles($columns, $gap, $padding) {
    :root {
      --onyx-grid-columns: #{$columns};
      --onyx-grid-gutter: #{$gap};
      --onyx-grid-margin: #{$padding};
    }
  }

  /**
  * Generate styles for all grid variants/breakpoints.
  */
  @each $breakpoint, $columns, $gap, $padding in $gridVariants {
    @if $breakpoint == "2xs" {
      // the styles should also be applied to width < 2xs so we do not use the "@include screen()" here
      @include define-breakpoint-styles($columns, $gap, $padding);
    } @else {
      @include screen(min, $breakpoint, $screenOffset) {
        @include define-breakpoint-styles($columns, $gap, $padding);
      }
    }
  }
}
