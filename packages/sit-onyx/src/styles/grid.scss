@use "breakpoints.scss" as *;
@use "sass:map";

// prettier-ignore
$gridVariants: (
//  NAME    MAX-VARIANT  COLUMNS  GUTTER  MARGIN
    "2xs"   none         4        1rem    1rem,
    "xs"    none         8        1rem    1rem,
    "sm"    none         8        1.5rem  2rem,
    "md"    none         12       1.5rem  4rem,
    "lg"    "md"         12       2rem    4rem,
    "xl"    "lg"         12       2rem    4rem,
);

@layer onyx.utility {
  /**
  * Grid container base class
  */
  .onyx-grid {
    display: grid;
    grid-template-columns: repeat(var(--onyx-grid-columns), minmax(0, 1fr));
    gap: var(--onyx-grid-gutter);
  }

  /**
  * Page class to apply padding, max-width and optional centered.
  * Is usually placed at the root element of every page.
  */
  .onyx-grid-container {
    // Note: The --onyx-grid-margin is implemented as padding here so that is also included in e.g. custom background colors
    // but the term "margin" comes from UX/Figma so we decided to keep naming it margin to be aligned
    padding: var(--onyx-grid-margin);
    max-width: var(--onyx-grid-max-width, 100%);
    margin-inline: var(--onyx-grid-margin-inline);
    box-sizing: border-box; // max-width should include the padding
    transition: max-width 1s;
  }

  /**
  * Utility class to allow optional centering for pages with max width.
  * Requires a "onyx-grid-max-*" class to be set.
  */
  .onyx-grid-center {
    --onyx-grid-margin-inline: auto;
  }

  /**
  * Grid container classes for "xl" and "lg" breakpoint variants with 16 or 20 columns
  */
  @include screen(min, lg) {
    .onyx-grid-xl-20,
    .onyx-grid-lg-16 {
      --onyx-grid-columns: 16;
    }
  }
  @include screen(min, xl) {
    .onyx-grid-xl-20 {
      --onyx-grid-columns: 20;
    }

    .onyx-grid-xl-16 {
      --onyx-grid-columns: 16;
    }
  }

  /**
  * Grid element class for defining how many columns the element spans
  */
  @for $i from 1 through 20 {
    .onyx-grid-span-#{$i} {
      grid-column-end: span min($i, var(--onyx-grid-columns));
    }
  }

  /**
  * Grid element class for spanning the full row width.
  */
  .onyx-grid-span-full {
    grid-column: 1 / span var(--onyx-grid-columns);
  }

  @mixin generate-grid-properties($columns, $gutter, $margin) {
    :where(:root) {
      --onyx-grid-columns: #{$columns};
      --onyx-grid-gutter: #{$gutter};
      --onyx-grid-margin: #{$margin};
    }
  }

  /**
  * Grid element class for defining breakpoint specific column count
  */
  @mixin generate-spans($first, $last, $name) {
    @for $span from $first through $last {
      .onyx-grid-#{$name}-span-#{$span} {
        grid-column-end: span min($span, var(--onyx-grid-columns));
      }
    }
  }

  /**
  * Grid container class for defining breakpoint specific max width
  */
  @mixin generate-grid-max($name, $maxVariant, $margin) {
    .onyx-grid-max-#{$maxVariant} {
      --onyx-grid-max-width: #{map.get($breakpoints, $name) - 1};
    }
  }

  @each $name, $maxVariant, $columns, $gutter, $margin in $gridVariants {
    @if $name == "2xs" {
      @include generate-grid-properties($columns, $gutter, $margin);
      @include generate-spans(1, $columns, $name);
    } @else {
      @include screen(min, $name) {
        @include generate-grid-properties($columns, $gutter, $margin);
        @include generate-spans(1, $columns, $name);

        @if $maxVariant != none {
          @include generate-grid-max($name, $maxVariant, $margin);
        }

        @if $name == "xl" {
          @include generate-spans(17, 20, $name);
        }
      }
    }
  }
}
