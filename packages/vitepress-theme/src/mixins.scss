/**
* Converts the given color (e.g. CSS variable or HEX color) to a VitePress "soft" color
* by adding 25% of transparency to it.
*/
@mixin hex-to-soft-color($property, $color) {
  #{$property}: color-mix(in srgb, $color 25%, transparent);
}

/**
* Defines the 4 scaled VitePress color CSS variables for the given onyx variable name.
*
* @example
* $name: "brand" , $onyx-color-base: "--onyx-test"
* --vp-c-brand-1: var(--onyx-test-500);
* --vp-c-brand-2: var(--onyx-test-600);
* --vp-c-brand-3: var(--onyx-test-500);
* --vp-c-brand-soft: var(--onyx-test-400) // will add transparency to color value;
*/
@mixin define-vitepress-color($name, $onyx-color-base, $offset: 0) {
  // VitePress color logic (see https://github.com/vuejs/vitepress/blob/main/src/client/theme-default/styles/vars.css#L18)
  // XXX-1: default color (most solid)
  // XXX-2: hover
  // XXX-3: solid color (e.g. button background)
  // XXX-soft: subtle background (must be semi-transparent)
  --vp-c-#{$name}-1: var(#{$onyx-color-base}-#{500 + $offset});
  --vp-c-#{$name}-2: var(#{$onyx-color-base}-#{600 + $offset});
  --vp-c-#{$name}-3: var(#{$onyx-color-base}-#{500 + $offset});
  @include hex-to-soft-color(--vp-c-#{$name}-soft, var(#{$onyx-color-base}-#{400 + $offset}));
}

/**
 * Applies CSS only to the given VitePress breakpoint.
 * @param {string} $min-max - Whether the breakpoint should be considered as min or max width.
 * @param {string} $name - name of the VitePress breakpoint. One of: xs, s, m, l, xl or xxl
 * @param {number} $offset - optional offset to add to the min/max width. Useful if both min and max are used for the same breakpoint
 *
 * @example breakpoint(min, m)
 * @example breakpoint(max, m)
 */
@mixin breakpoint($min-max, $name, $offset: 0) {
  $breakpoints: (
    xs: 375px,
    s: 640px,
    m: 768px,
    l: 960px,
    xl: 1280px,
    xxl: 1440px,
  );

  @media (#{$min-max}-width: #{map-get($breakpoints, $name) + $offset}) {
    @content;
  }
}
