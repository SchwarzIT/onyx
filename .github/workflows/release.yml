name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        default: dev
        description: Environment to release to

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  STAGE: ${{ inputs.environment || 'dev' }}
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      pull-requests: write
    outputs:
      # We can use the `published` boolean in other steps to decide, when we do deployments
      published: ${{ steps.PublishOrCreatePR.outputs.published }}
    steps:
      - uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.GH_PUSH_PROTECTED_KEY }}
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: 🛠️ Build packages
        run: pnpm build:all --filter=!docs --filter=!demo-app

      - name: 🤖 Configure Git Bot
        run: |
          git config user.name "Release Bot[bot]"
          git config user.email "bot@example.com"

      # if environment is "dev", we will create the versions manually so no extra PR is created by the "changesets/action" below
      # and the changes are published immediately
      - name: Create package versions (DEV)
        if: env.STAGE != 'prod'
        run: pnpm exec changeset version --snapshot dev

      - name: Determine if is snapshot version
        run: echo "IS_SNAPSHOT_VERSION=$(cd packages/sit-onyx && pnpm pkg get version | grep -q '\-' && echo 'true' || echo 'false')" >> $GITHUB_ENV

      # if (prod) changesets exist, a PR will be created with the changed versions so we can review the changes before actually releasing
      # otherwise (e.g. the PR has been merged), the packages will be published to npm (if changes exist)
      - name: Create release pull request or publish to npm
        id: PublishOrCreatePR
        uses: changesets/action@v1
        with:
          # we only include the publish command if either:
          # 1. version is a snapshot version (contains a "-" dash, e.g. 1.1.0-dev.DATETIMESTAMP)
          # 2. version is a regular version AND stage is prod. This check is needed in the case a "prod" release is triggered and then the created PR is merged.
          # In this case, the versions are "prod" versions but the automated run after the merge runs on stage "dev" by default which is not intended
          publish: ${{ (env.IS_SNAPSHOT_VERSION || env.STAGE == 'prod') && 'pnpm exec changeset publish' || '' }}
          createGithubReleases: ${{ env.STAGE == 'prod' }}
          title: "release: update onyx versions and changelogs" # PR title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
