name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        default: dev
        description: Environment to release to

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  STAGE: ${{ inputs.environment || 'dev' }}
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
    outputs:
      # We can use the `published` boolean in other steps to decide, when we deployments
      published: ${{ steps.PublishOrCreatePR.outputs.published }}
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.GH_PUSH_PROTECTED_KEY }}
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: üõ†Ô∏è Build packages
        run: pnpm build:all --filter=!docs

      - name: Upload Storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: packages/sit-onyx/storybook-static

      - name: Upload playground artifact
        uses: actions/upload-artifact@v4
        with:
          name: playground
          path: apps/playground/dist

      - name: ü§ñ Configure Git Bot
        run: |
          git config user.name "Release Bot[bot]"
          git config user.email "bot@example.com"

      - name: Create release versions
        # When manually dispatched, a minor release should be performed:
        # The `version`ing is done by the `changesets/action@v1`, which will also create a PR
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          set -ex
          pnpm exec changeset version ${{ env.STAGE == 'dev' && '--snapshot dev --no-git-tag' || '' }}

      # -> Publishes available versions, if no changesets are available (=> "Version" step before has been run, or "PublishOrCreatePR" PR has been merged)
      # -> Otherwise creates PR with new versions
      - name: Public or create PR
        id: PublishOrCreatePR
        uses: changesets/action@v1
        with:
          publish: pnpm exec changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # the docs need to be build AFTER the release because there the changelogs are generated which need to be included in the
      # documentation build
      - name: üõ†Ô∏è Build docs
        run: pnpm build:all --filter=docs
        if: steps.PublishOrCreatePR.outputs.published == 'true'
        env:
          # needed for increase rate limit for the GitHub API that is used when building
          # the VitePress documentation
          VITEPRESS_GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        if: steps.PublishOrCreatePR.outputs.published == 'true'
        with:
          name: documentation
          path: apps/docs/src/.vitepress/dist

  deploy_storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Storybook artifact
        uses: actions/download-artifact@v5
        with:
          name: storybook-static
          path: packages/sit-onyx/.cloud-foundry/storybook-static

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: packages/sit-onyx/.cloud-foundry

  deploy_documentation:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Storybook artifact
        uses: actions/download-artifact@v5
        with:
          name: documentation
          path: apps/docs/.cloud-foundry/dist

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: apps/docs/.cloud-foundry

  deploy_playground:
    name: Deploy Playground
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: playground
          path: apps/playground/.cloud-foundry/dist

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: apps/playground/.cloud-foundry
