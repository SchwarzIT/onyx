name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        default: dev
        description: Environment to release to

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  STAGE: ${{ inputs.environment || 'dev' }}
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      pull-requests: write
    outputs:
      # We can use the `published` boolean in other steps to decide, when we do deployments
      published: ${{ steps.PublishOrCreatePR.outputs.published }}
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.GH_PUSH_PROTECTED_KEY }}
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: üõ†Ô∏è Build packages
        run: pnpm build:all --filter=!docs

      - name: Upload Storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: packages/sit-onyx/storybook-static

      - name: Upload playground artifact
        uses: actions/upload-artifact@v4
        with:
          name: playground
          path: apps/playground/dist

      - name: ü§ñ Configure Git Bot
        run: |
          git config user.name "Release Bot[bot]"
          git config user.email "bot@example.com"

      # if environment is "dev", we will create the versions manually so no extra PR is created by the "changesets/action" below
      # and the changes are published immediately
      - name: Create DEV package versions
        if: env.STAGE != 'prod'
        run: |
          set -ex
          pnpm exec changeset version --snapshot dev --no-git-tag

      # if (prod) changesets exist, a PR will be created with the changed versions so we can review the changes before actually releasing
      # otherwise (e.g. the PR has been merged), the packages will be published to npm (if changes exist)
      - name: Create Release Pull Request or Publish to npm
        id: PublishOrCreatePR
        uses: changesets/action@v1
        with:
          publish: pnpm exec changeset publish
          createGithubReleases: ${{ env.STAGE == 'prod' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # the docs need to be build AFTER the release because there the changelogs are generated which need to be included in the
      # documentation build
      - name: üõ†Ô∏è Build docs
        run: pnpm build:all --filter=docs
        if: env.STAGE != 'prod' || steps.PublishOrCreatePR.outputs.published == 'true'
        env:
          # needed for increase rate limit for the GitHub API that is used when building
          # the VitePress documentation
          VITEPRESS_GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        if: env.STAGE != 'prod' || steps.PublishOrCreatePR.outputs.published == 'true'
        with:
          name: documentation
          path: apps/docs/src/.vitepress/dist

  deploy_storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: release
    if: inputs.environment != 'prod' || needs.release.outputs.published == 'true'
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Storybook artifact
        uses: actions/download-artifact@v5
        with:
          name: storybook-static
          path: packages/sit-onyx/.cloud-foundry/storybook-static

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: packages/sit-onyx/.cloud-foundry

  deploy_documentation:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: release
    if: inputs.environment != 'prod' || needs.release.outputs.published == 'true'
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Storybook artifact
        uses: actions/download-artifact@v5
        with:
          name: documentation
          path: apps/docs/.cloud-foundry/dist

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: apps/docs/.cloud-foundry

  deploy_playground:
    name: Deploy Playground
    runs-on: ubuntu-latest
    needs: release
    if: inputs.environment != 'prod' || needs.release.outputs.published == 'true'
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: playground
          path: apps/playground/.cloud-foundry/dist

      - name: Deploy to Cloud Foundry
        uses: ./.github/templates/cf-push
        with:
          endpoint: ${{ vars.CF_ENDPOINT }}
          org: ${{ vars.CF_ORG }}
          username: ${{ vars.CF_USERNAME }}
          password: ${{ secrets.CF_PASSWORD }}
          space: ${{ env.STAGE }}
          working-directory: apps/playground/.cloud-foundry
