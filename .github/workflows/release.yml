name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      pull-requests: write
    outputs:
      # We can use the `published` boolean in other steps to decide, when we do deployments
      published: ${{ steps.PublishOrCreatePR.outputs.published }}
      environment_docs: ${{ steps.DetermineDeployTargets.outputs.ENVIRONMENT_DOCS }}
      environment_sit-onyx: ${{ steps.DetermineDeployTargets.outputs.ENVIRONMENT_STORYBOOK }}
      environment_playground: ${{ steps.DetermineDeployTargets.outputs.ENVIRONMENT_PLAYGROUND }}
      environment_demo-app: ${{ steps.DetermineDeployTargets.outputs.ENVIRONMENT_DEMO_APP }}

    steps:
      - uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.GH_PUSH_PROTECTED_KEY }}
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: 🛠️ Build packages
        run: pnpm build:all --filter=!docs --filter=!demo-app

      - name: 🤖 Configure Git Bot
        run: |
          git config user.name "Release Bot[bot]"
          git config user.email "bot@example.com"

      # if environment is "dev", we will create the versions manually so no extra PR is created by the "changesets/action" below
      # and the changes are published immediately
      - name: Determine snapshot versions
        run: pnpm exec changeset version --snapshot dev

      - name: Create release pull request or publish to npm
        id: PublishOrCreatePR
        uses: changesets/action@v1
        with:
          publish: "pnpm exec changeset publish"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Deploy Targets
        id: DetermineDeployTargets
        if: steps.PublishOrCreatePR.outputs.published == 'true'
        run: |
          export mapped=echo "${{ steps.PublishOrCreatePR.outputs.publishedPackages }}" | jq -c 'map_values({ name: .name, deploy: if .version | test("^\\d+.\\d+.\\d+$") then "prod" else "dev" end })'
          echo ENVIRONMENT_DOCS=$(echo $mapped | jq -c '.[] | select(.name == "docs") | .deploy') >> "$GITHUB_OUTPUT"
          echo ENVIRONMENT_STORYBOOK=$(echo $mapped | jq -c '.[] | select(.name == "sit-onyx") | .deploy') >> "$GITHUB_OUTPUT"
          echo ENVIRONMENT_PLAYGROUND=$(echo $mapped | jq -c '.[] | select(.name == "playground") | .deploy') >> "$GITHUB_OUTPUT"
          echo ENVIRONMENT_DEMO_APP=$(echo $mapped | jq -c '.[] | select(.name == "demo-app") | .deploy') >> "$GITHUB_OUTPUT"

  deploy-websites:
    name: deploy-websites
    needs: release
    if: needs.release.outputs.published == 'true'
    uses: ./.github/workflows/deploy-websites.yml
    with:
      environment_docs: ${{ needs.release.outputs.environment_docs }}
      environment_sit-onyx: ${{ needs.release.outputs.environment_sit-onyx }}
      environment_playground: ${{ needs.release.outputs.environment_playground }}
      environment_demo-app: ${{ needs.release.outputs.environment_demo-app }}
