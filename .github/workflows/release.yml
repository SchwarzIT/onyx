name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      pull-requests: write
    outputs:
      # We can use the `published` boolean in other steps to decide, when we do deployments
      published: ${{ steps.Publish.outputs.published }}
      is_snapshot_release: ${{ steps.DetermineSnapshotVersions.outputs.IS_SNAPSHOT_RELEASE }}

    steps:
      - uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.GH_PUSH_PROTECTED_KEY }}
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: 🛠️ Build packages
        run: pnpm build:all --filter=!./apps/*

      - name: 🤖 Configure Git Bot
        run: |
          git config user.name "Release Bot[bot]"
          git config user.email "bot@example.com"

      # All existing changesets are applied for a snapshot release.
      # In case of a "real" release all changesets will already have been applied through a PR, so this step won't have an effect.
      - name: Determine snapshot versions
        id: DetermineSnapshotVersions
        run: |
          pnpm exec changeset status --since origin/main --output=snapshot.json
          IS_SNAPSHOT_RELEASE=$(cat snapshot.json | jq -r '(.releases | length) > 0')
          rm snapshot.json
          if [[ $IS_SNAPSHOT_RELEASE == "true" ]]; then
            pnpm exec changeset version --snapshot dev
            echo "IS_SNAPSHOT_RELEASE=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish
        id: Publish
        uses: changesets/action@v1
        with:
          publish: pnpm exec changeset publish ${{ (steps.DetermineSnapshotVersions.outputs.IS_SNAPSHOT_RELEASE && '--tag dev') || '' }}
          createGithubReleases: ${{ steps.DetermineSnapshotVersions.outputs.IS_SNAPSHOT_RELEASE != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-websites:
    name: deploy-websites
    needs: release
    if: needs.release.outputs.published == 'true'
    uses: ./.github/workflows/deploy-websites.yml
    with:
      environment: ${{ needs.release.outputs.is_snapshot_release && 'dev' || 'prod' }}
    secrets: inherit
