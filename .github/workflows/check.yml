name: Check code quality
on:
  pull_request:
  workflow_dispatch:
  # see: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#configuring-continuous-integration-ci-workflows-for-merge-queues
  merge_group:
  # we want to keep sonarqube up-to-date for the main branch
  push:
    branches:
      - main

# cancel previous runs if new changes are pushed to the branch/PR
# see: https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_REMOTE_CACHE__TURBO_TOKEN }}

jobs:
  # We run the build first standalone to ensure everything is cached for all other jobs
  build:
    name: Build and Cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/templates/node-setup

      - name: üõ†Ô∏è Build packages
        run: pnpm run build:all

  check:
    name: Check code quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          # needed when building VitePress docs so timestamps can be calculated correctly
          fetch-depth: 0

      - uses: ./.github/templates/node-setup

      - name: üîé Lint
        run: pnpm run lint:ci:all
        # we must continue on error here so the eslint results are uploaded to GitHub in the next step.
        continue-on-error: true

      - name: Upload eslint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: üîé Check formatting
        run: pnpm run format:check:all

      - name: üõ†Ô∏è Build packages
        run: pnpm run build:all

      - name: üö® Run unit tests
        run: pnpm run test:all

      - name: üìà SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # make sure that publint is only run after all packages have been built
      - name: Run publint
        run: pnpm run publint:all

      # scan CSS build for browser compatibility issues
      - name: üíÖ Run stylelint
        run: pnpm run stylelint

      - name: üëÆ SonarQube Quality Gate check
        id: sonarqube-quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        if: ${{ github.event_name == 'pull_request' }} # dont block anything except pull-requests
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - run: echo "::warning title=Sonarqube-Quality-Gate::Failed"
        if: ${{ github.event_name == 'pull_request' && steps.sonarqube-quality-gate.outcome != 'success' }}

      - uses: actions/github-script@v7
        if: ${{ github.event_name == 'pull_request' && steps.sonarqube-quality-gate.outcome != 'success' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ö†Ô∏è Sonarqube Quality Gate Failed!'
            })

      - name: Upload code coverage artifact
        uses: actions/upload-artifact@v4
        if: always() # needed to also upload test results when they failed (useful for debugging)
        with:
          name: coverage
          path: packages/sit-onyx/coverage

      - name: Upload Storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: packages/sit-onyx/storybook-static

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: apps/docs/src/.vitepress/dist

  screenshots:
    if: github.event_name == 'push' # avoid running screenshot tests on main again after a merge
    needs: build
    name: Component tests
    uses: ./.github/workflows/playwright.yml
    secrets: inherit
